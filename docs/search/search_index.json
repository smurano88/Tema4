{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bienvenidos a Botiqu\u00ednTIC Para m\u00e1s informaci\u00f3n visita smurano.es .","title":"Home"},{"location":"#bienvenidos-a-botiquintic","text":"Para m\u00e1s informaci\u00f3n visita smurano.es .","title":"Bienvenidos a Botiqu\u00ednTIC"},{"location":"about/","text":"{","title":"About"},{"location":"manuales/dart/","text":"Introducci\u00f3n Dart es un lenguaje de programaci\u00f3n vers\u00e1til y moderno desarrollado por Google que se ejecuta tanto en el navegador web como en el servidor. Es ideal para crear aplicaciones web, aplicaciones m\u00f3viles multiplataforma con Flutter y backends escalables. Este documento te guiar\u00e1 a trav\u00e9s de los conceptos b\u00e1sicos de la sintaxis de Dart, proporcionando ejemplos de c\u00f3digo y explicaciones sencillas para ayudarte a iniciarte en la programaci\u00f3n en este lenguaje. Tipos de Datos Dart posee un sistema de tipos seguro que ayuda a prevenir errores en tiempo de ejecuci\u00f3n. Algunos de los tipos de datos b\u00e1sicos son: N\u00fameros: int para enteros y double para decimales. Cadenas: String para secuencias de caracteres. Booleanos: bool para valores true o false . Listas: List para colecciones ordenadas de elementos. Mapas: Map para colecciones de pares clave-valor. Peligro!! Importante tipificar de manera correcta los datos que vamos a utilizar. Ejemplos: var numeroEntero = 10; // int var numeroDecimal = 3.14; // double var nombre = \"Bard\"; // String var esVerdadero = true; // bool var listaDeNumeros = [1, 2, 3]; // List<int> var mapaDePaises = {\"Espa\u00f1a\": \"Madrid\", \"Francia\": \"Par\u00eds\"}; // Map<String, String> Variables Las variables se utilizan para almacenar datos en la memoria. Para declarar una variable, se indica el tipo de dato seguido del nombre de la variable y un punto y coma: var nombre; // Variable sin inicializar var edad = 25; // Variable inicializada Operadores Dart ofrece una amplia gama de operadores para realizar operaciones matem\u00e1ticas, l\u00f3gicas y comparativas. Algunos ejemplos son: Aritm\u00e9ticos: + , - , * , / , % L\u00f3gicos: && , || , ! Comparativos: == , != , < , > , <= , >= Cuidado! Cuidado con el orden de prioridad de los operadores. Ejemplos: var suma = 10 + 5; // 15 var diferencia = 10 - 5; // 5 var producto = 10 * 5; // 50 var cociente = 10 / 5; // 2.0 var resto = 10 % 3; // 1 var esMayor = 10 > 5; // true var esIgual = 10 == 10; // true var esDistinto = 10 != 5; // true Estructuras de control Las estructuras de control permiten ejecutar diferentes bloques de c\u00f3digo seg\u00fan ciertas condiciones. Las m\u00e1s comunes son: Sentencias condicionales: if , else , else if Bucles: for , while , do while Ejemplos: var numero = 10; if (numero > 0) { print(\"El n\u00famero es positivo\"); } else { print(\"El n\u00famero es negativo\"); } for (var i = 0; i < 5; i++) { print(\"Iteraci\u00f3n $i\"); } var contador = 0; while (contador < 5) { print(\"Iteraci\u00f3n $contador\"); contador++; } Funciones Las funciones son bloques de c\u00f3digo reutilizables que pueden recibir par\u00e1metros y devolver un valor. Se definen con la palabra clave function seguida del nombre de la funci\u00f3n, los par\u00e1metros entre par\u00e9ntesis y el tipo de dato de retorno: void saludar(String nombre) { print(\"Hola $nombre!\"); } String obtenerNombre() { return \"Bard\"; } void main() { saludar(\"Usuario\"); var nombre = obtenerNombre(); print(\"El nombre es $nombre\"); } Clases y Objetos Dart es un lenguaje orientado a objetos, lo que permite crear clases y objetos. Las clases son plantillas para crear objetos con sus propios atributos y m\u00e9todos. Ejemplos: ```Dart class Persona { String nombre; int edad; Persona(this.nombre, this.edad); void saludar() { print(\"Hola, mi nombre es $nombre y tengo $edad a\u00f1os\"); } } void main() { var persona1 = Persona(\"Juan\", 25); persona1.saludar(); } ````","title":"Dart"},{"location":"manuales/dart/#introduccion","text":"Dart es un lenguaje de programaci\u00f3n vers\u00e1til y moderno desarrollado por Google que se ejecuta tanto en el navegador web como en el servidor. Es ideal para crear aplicaciones web, aplicaciones m\u00f3viles multiplataforma con Flutter y backends escalables. Este documento te guiar\u00e1 a trav\u00e9s de los conceptos b\u00e1sicos de la sintaxis de Dart, proporcionando ejemplos de c\u00f3digo y explicaciones sencillas para ayudarte a iniciarte en la programaci\u00f3n en este lenguaje.","title":"Introducci\u00f3n"},{"location":"manuales/dart/#tipos-de-datos","text":"Dart posee un sistema de tipos seguro que ayuda a prevenir errores en tiempo de ejecuci\u00f3n. Algunos de los tipos de datos b\u00e1sicos son: N\u00fameros: int para enteros y double para decimales. Cadenas: String para secuencias de caracteres. Booleanos: bool para valores true o false . Listas: List para colecciones ordenadas de elementos. Mapas: Map para colecciones de pares clave-valor. Peligro!! Importante tipificar de manera correcta los datos que vamos a utilizar. Ejemplos: var numeroEntero = 10; // int var numeroDecimal = 3.14; // double var nombre = \"Bard\"; // String var esVerdadero = true; // bool var listaDeNumeros = [1, 2, 3]; // List<int> var mapaDePaises = {\"Espa\u00f1a\": \"Madrid\", \"Francia\": \"Par\u00eds\"}; // Map<String, String>","title":"Tipos de Datos"},{"location":"manuales/dart/#variables","text":"Las variables se utilizan para almacenar datos en la memoria. Para declarar una variable, se indica el tipo de dato seguido del nombre de la variable y un punto y coma: var nombre; // Variable sin inicializar var edad = 25; // Variable inicializada","title":"Variables"},{"location":"manuales/dart/#operadores","text":"Dart ofrece una amplia gama de operadores para realizar operaciones matem\u00e1ticas, l\u00f3gicas y comparativas. Algunos ejemplos son: Aritm\u00e9ticos: + , - , * , / , % L\u00f3gicos: && , || , ! Comparativos: == , != , < , > , <= , >= Cuidado! Cuidado con el orden de prioridad de los operadores. Ejemplos: var suma = 10 + 5; // 15 var diferencia = 10 - 5; // 5 var producto = 10 * 5; // 50 var cociente = 10 / 5; // 2.0 var resto = 10 % 3; // 1 var esMayor = 10 > 5; // true var esIgual = 10 == 10; // true var esDistinto = 10 != 5; // true","title":"Operadores"},{"location":"manuales/dart/#estructuras-de-control","text":"Las estructuras de control permiten ejecutar diferentes bloques de c\u00f3digo seg\u00fan ciertas condiciones. Las m\u00e1s comunes son: Sentencias condicionales: if , else , else if Bucles: for , while , do while Ejemplos: var numero = 10; if (numero > 0) { print(\"El n\u00famero es positivo\"); } else { print(\"El n\u00famero es negativo\"); } for (var i = 0; i < 5; i++) { print(\"Iteraci\u00f3n $i\"); } var contador = 0; while (contador < 5) { print(\"Iteraci\u00f3n $contador\"); contador++; }","title":"Estructuras de control"},{"location":"manuales/dart/#funciones","text":"Las funciones son bloques de c\u00f3digo reutilizables que pueden recibir par\u00e1metros y devolver un valor. Se definen con la palabra clave function seguida del nombre de la funci\u00f3n, los par\u00e1metros entre par\u00e9ntesis y el tipo de dato de retorno: void saludar(String nombre) { print(\"Hola $nombre!\"); } String obtenerNombre() { return \"Bard\"; } void main() { saludar(\"Usuario\"); var nombre = obtenerNombre(); print(\"El nombre es $nombre\"); }","title":"Funciones"},{"location":"manuales/dart/#clases-y-objetos","text":"Dart es un lenguaje orientado a objetos, lo que permite crear clases y objetos. Las clases son plantillas para crear objetos con sus propios atributos y m\u00e9todos. Ejemplos: ```Dart class Persona { String nombre; int edad; Persona(this.nombre, this.edad); void saludar() { print(\"Hola, mi nombre es $nombre y tengo $edad a\u00f1os\"); } } void main() { var persona1 = Persona(\"Juan\", 25); persona1.saludar(); } ````","title":"Clases y Objetos"},{"location":"manuales/python/","text":"Introducci\u00f3n Python es un lenguaje de programaci\u00f3n vers\u00e1til y f\u00e1cil de aprender, ideal para principiantes. Se caracteriza por su sintaxis clara y legible, similar al lenguaje natural, lo que facilita su comprensi\u00f3n y uso. Este manual te guiar\u00e1 a trav\u00e9s de los conceptos b\u00e1sicos de Python, permiti\u00e9ndote escribir tus propios programas y explorar el mundo de la programaci\u00f3n. Entorno de desarrollo Para comenzar a programar en Python, necesitas un entorno de desarrollo. Puedes usar el int\u00e9rprete interactivo de Python, disponible en la mayor\u00eda de los sistemas operativos, o un IDE (Integrated Development Environment) como PyCharm, Visual Studio Code o Jupyter Notebook. Tipos de datos En Python, existen diferentes tipos de datos para almacenar informaci\u00f3n. Los tipos de datos m\u00e1s comunes son: Num\u00e9ricos: enteros ( int ), decimales ( float ) y complejos ( complex ) Texto: cadenas de caracteres ( str ) Booleanos: True o False . Colecciones: listas ( list ), tuplas ( tuple ), diccionarios ( dict ) Conjuntos: ( set ). Entrada y salida Para interactuar con el usuario, Python ofrece funciones para leer y escribir datos. Las funciones m\u00e1s comunes son: input() : lee una l\u00ednea de texto del usuario. print() : imprime texto en la pantalla. Condicionales Las estructuras condicionales permiten ejecutar diferentes acciones dependiendo de una condici\u00f3n. Las estructuras condicionales m\u00e1s comunes son: if : ejecuta un bloque de c\u00f3digo si la condici\u00f3n se cumple. elif : ejecuta un bloque de c\u00f3digo si la condici\u00f3n anterior no se cumple y la actual s\u00ed. else : ejecuta un bloque de c\u00f3digo si ninguna de las condiciones anteriores se cumple. Bucles Los bucles permiten ejecutar un bloque de c\u00f3digo de forma repetitiva. Los bucles m\u00e1s comunes son: for : ejecuta un bloque de c\u00f3digo para cada elemento de una secuencia. while : ejecuta un bloque de c\u00f3digo mientras una condici\u00f3n se cumpla. Funciones Las funciones son bloques de c\u00f3digo reutilizables que encapsulan una tarea espec\u00edfica. Las funciones permiten organizar el c\u00f3digo y hacerlo m\u00e1s modular. M\u00f3dulos Los m\u00f3dulos son archivos que contienen c\u00f3digo Python que puede ser importado y utilizado en otros programas. Los m\u00f3dulos permiten compartir c\u00f3digo y reutilizarlo en diferentes proyectos. Estructuras de datos m\u00e1s avanzadas Adem\u00e1s de las estructuras de datos b\u00e1sicas, Python ofrece estructuras m\u00e1s avanzadas como: Listas : son colecciones ordenadas y mutables de datos. Tuplas : son colecciones ordenadas e inmutables de datos. Diccionarios : son colecciones de pares clave-valor. Conjuntos : son colecciones no ordenadas de elementos \u00fanicos. Programaci\u00f3n orientada a objetos Python es un lenguaje de programaci\u00f3n orientado a objetos, lo que significa que permite crear objetos que encapsulan datos y comportamiento. La programaci\u00f3n orientada a objetos facilita el desarrollo de programas complejos y modulares. Ejemplos de c\u00f3digo de Python 1. Imprimir un mensaje en pantalla: print(\"Hola, mundo!\") 2. Calcular la suma de dos n\u00fameros: num1 = 10 num2 = 20 suma = num1 + num2 print(\"La suma de\", num1, \"y\", num2, \"es\", suma) 3. Usar una estructura condicional: numero = 5 if numero > 0: print(\"El n\u00famero\", numero, \"es positivo\") else: print(\"El n\u00famero\", numero, \"es negativo\") 4. Usar un bucle for: lista_numeros = [1, 2, 3, 4, 5] for numero in lista_numeros: print(numero) 5. Definir una funci\u00f3n: def saludar(nombre): print(\"Hola\", nombre, \"!\") saludar(\"Ana\") 6. Importar un m\u00f3dulo: import math print(math.pi) 7. Crear una clase: class Persona: def __init__(self, nombre, edad): self.nombre = nombre self.edad = edad def saludar(self): print(\"Hola, me llamo\", self.nombre) persona1 = Persona(\"Juan\", 30) persona1.saludar() 8. Leer un archivo: with open(\"archivo.txt\", \"r\") as archivo: contenido = archivo.read() print(contenido) 9. Escribir en un archivo: with open(\"archivo.txt\", \"w\") as archivo: archivo.write(\"Hola, mundo!\") 10. Usar expresiones regulares: import re texto = \"Hola, mundo!\" resultado = re.search(\"Hola\", texto) if resultado: print(\"La palabra 'Hola' se encuentra en el texto\") Estos son solo algunos ejemplos de c\u00f3digo de Python. Puedes encontrar muchos m\u00e1s ejemplos en Internet o en libros de programaci\u00f3n. Recursos adicionales: https://www.freecodecamp.org/espanol/news/python-ejemplos-de-codigo-tutorial-de-programacion-en-python-desde-cero-para-principiantes/ https://aprendeconalf.es/docencia/python/ejercicios/ https://www.freecodecamp.org/espanol/news/25-proyectos-en-python-para-principiantes/ Consejos para principiantes: Comienza con proyectos sencillos y ve aumentando la dificultad gradualmente. No tengas miedo de cometer errores. La mejor forma de aprender es experimentando. Busca ayuda en Internet o en foros de programaci\u00f3n si te encuentras con dificultades. Practica con regularidad para mejorar tus habilidades. Conclusi\u00f3n Este manual te ha proporcionado una base s\u00f3lida para comenzar a programar en Python. Con la pr\u00e1ctica y la dedicaci\u00f3n, podr\u00e1s desarrollar tus habilidades y convertirte en un programador experto.","title":"Python"},{"location":"manuales/python/#introduccion","text":"Python es un lenguaje de programaci\u00f3n vers\u00e1til y f\u00e1cil de aprender, ideal para principiantes. Se caracteriza por su sintaxis clara y legible, similar al lenguaje natural, lo que facilita su comprensi\u00f3n y uso. Este manual te guiar\u00e1 a trav\u00e9s de los conceptos b\u00e1sicos de Python, permiti\u00e9ndote escribir tus propios programas y explorar el mundo de la programaci\u00f3n.","title":"Introducci\u00f3n"},{"location":"manuales/python/#entorno-de-desarrollo","text":"Para comenzar a programar en Python, necesitas un entorno de desarrollo. Puedes usar el int\u00e9rprete interactivo de Python, disponible en la mayor\u00eda de los sistemas operativos, o un IDE (Integrated Development Environment) como PyCharm, Visual Studio Code o Jupyter Notebook.","title":"Entorno de desarrollo"},{"location":"manuales/python/#tipos-de-datos","text":"En Python, existen diferentes tipos de datos para almacenar informaci\u00f3n. Los tipos de datos m\u00e1s comunes son: Num\u00e9ricos: enteros ( int ), decimales ( float ) y complejos ( complex ) Texto: cadenas de caracteres ( str ) Booleanos: True o False . Colecciones: listas ( list ), tuplas ( tuple ), diccionarios ( dict ) Conjuntos: ( set ).","title":"Tipos de datos"},{"location":"manuales/python/#entrada-y-salida","text":"Para interactuar con el usuario, Python ofrece funciones para leer y escribir datos. Las funciones m\u00e1s comunes son: input() : lee una l\u00ednea de texto del usuario. print() : imprime texto en la pantalla.","title":"Entrada y salida"},{"location":"manuales/python/#condicionales","text":"Las estructuras condicionales permiten ejecutar diferentes acciones dependiendo de una condici\u00f3n. Las estructuras condicionales m\u00e1s comunes son: if : ejecuta un bloque de c\u00f3digo si la condici\u00f3n se cumple. elif : ejecuta un bloque de c\u00f3digo si la condici\u00f3n anterior no se cumple y la actual s\u00ed. else : ejecuta un bloque de c\u00f3digo si ninguna de las condiciones anteriores se cumple.","title":"Condicionales"},{"location":"manuales/python/#bucles","text":"Los bucles permiten ejecutar un bloque de c\u00f3digo de forma repetitiva. Los bucles m\u00e1s comunes son: for : ejecuta un bloque de c\u00f3digo para cada elemento de una secuencia. while : ejecuta un bloque de c\u00f3digo mientras una condici\u00f3n se cumpla.","title":"Bucles"},{"location":"manuales/python/#funciones","text":"Las funciones son bloques de c\u00f3digo reutilizables que encapsulan una tarea espec\u00edfica. Las funciones permiten organizar el c\u00f3digo y hacerlo m\u00e1s modular.","title":"Funciones"},{"location":"manuales/python/#modulos","text":"Los m\u00f3dulos son archivos que contienen c\u00f3digo Python que puede ser importado y utilizado en otros programas. Los m\u00f3dulos permiten compartir c\u00f3digo y reutilizarlo en diferentes proyectos.","title":"M\u00f3dulos"},{"location":"manuales/python/#estructuras-de-datos-mas-avanzadas","text":"Adem\u00e1s de las estructuras de datos b\u00e1sicas, Python ofrece estructuras m\u00e1s avanzadas como: Listas : son colecciones ordenadas y mutables de datos. Tuplas : son colecciones ordenadas e inmutables de datos. Diccionarios : son colecciones de pares clave-valor. Conjuntos : son colecciones no ordenadas de elementos \u00fanicos.","title":"Estructuras de datos m\u00e1s avanzadas"},{"location":"manuales/python/#programacion-orientada-a-objetos","text":"Python es un lenguaje de programaci\u00f3n orientado a objetos, lo que significa que permite crear objetos que encapsulan datos y comportamiento. La programaci\u00f3n orientada a objetos facilita el desarrollo de programas complejos y modulares.","title":"Programaci\u00f3n orientada a objetos"},{"location":"manuales/python/#ejemplos-de-codigo-de-python","text":"1. Imprimir un mensaje en pantalla: print(\"Hola, mundo!\") 2. Calcular la suma de dos n\u00fameros: num1 = 10 num2 = 20 suma = num1 + num2 print(\"La suma de\", num1, \"y\", num2, \"es\", suma) 3. Usar una estructura condicional: numero = 5 if numero > 0: print(\"El n\u00famero\", numero, \"es positivo\") else: print(\"El n\u00famero\", numero, \"es negativo\") 4. Usar un bucle for: lista_numeros = [1, 2, 3, 4, 5] for numero in lista_numeros: print(numero) 5. Definir una funci\u00f3n: def saludar(nombre): print(\"Hola\", nombre, \"!\") saludar(\"Ana\") 6. Importar un m\u00f3dulo: import math print(math.pi) 7. Crear una clase: class Persona: def __init__(self, nombre, edad): self.nombre = nombre self.edad = edad def saludar(self): print(\"Hola, me llamo\", self.nombre) persona1 = Persona(\"Juan\", 30) persona1.saludar() 8. Leer un archivo: with open(\"archivo.txt\", \"r\") as archivo: contenido = archivo.read() print(contenido) 9. Escribir en un archivo: with open(\"archivo.txt\", \"w\") as archivo: archivo.write(\"Hola, mundo!\") 10. Usar expresiones regulares: import re texto = \"Hola, mundo!\" resultado = re.search(\"Hola\", texto) if resultado: print(\"La palabra 'Hola' se encuentra en el texto\") Estos son solo algunos ejemplos de c\u00f3digo de Python. Puedes encontrar muchos m\u00e1s ejemplos en Internet o en libros de programaci\u00f3n.","title":"Ejemplos de c\u00f3digo de Python"},{"location":"manuales/python/#recursos-adicionales","text":"https://www.freecodecamp.org/espanol/news/python-ejemplos-de-codigo-tutorial-de-programacion-en-python-desde-cero-para-principiantes/ https://aprendeconalf.es/docencia/python/ejercicios/ https://www.freecodecamp.org/espanol/news/25-proyectos-en-python-para-principiantes/","title":"Recursos adicionales:"},{"location":"manuales/python/#consejos-para-principiantes","text":"Comienza con proyectos sencillos y ve aumentando la dificultad gradualmente. No tengas miedo de cometer errores. La mejor forma de aprender es experimentando. Busca ayuda en Internet o en foros de programaci\u00f3n si te encuentras con dificultades. Practica con regularidad para mejorar tus habilidades.","title":"Consejos para principiantes:"},{"location":"manuales/python/#conclusion","text":"Este manual te ha proporcionado una base s\u00f3lida para comenzar a programar en Python. Con la pr\u00e1ctica y la dedicaci\u00f3n, podr\u00e1s desarrollar tus habilidades y convertirte en un programador experto.","title":"Conclusi\u00f3n"}]}